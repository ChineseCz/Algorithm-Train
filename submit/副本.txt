
class AkP1050 extends Problem {
    int[] num;
    int[] sum = new int[4];
    List<Integer> list1 = new ArrayList<>();
    List<Integer> list2 = new ArrayList<>();
    List<Integer> list3 = new ArrayList<>();
    @Override
    public void input() {
        ans = 15*(int)1e5;
        n = scan.nextInt();
        nums = new int[n + 1];
        num = new int[n+1];
        for (int i = 1; i <= n; i++)
            nums[i] = scan.nextInt();
        Arrays.sort(nums);
        for (int j=1,i= n; i >= 1; i--) {
            num[i] = nums[j];
            j++;
        }
        dfs(1);
        output();


    }
    public void dfs(int u) {
        if (u == n + 1) {
            if (!list1.isEmpty() && !list2.isEmpty() && !list3.isEmpty()) {


                if (sum[1] > sum[2] && sum[2] > sum[3]) {
                    int res = sum[1] - sum[3];
                    ans = Math.min(ans,res);
                }
            }
        }
        else {
            //放入一等
            sum[1] += nums[u];
            list1.add(nums[u]);
            dfs(u+1);
            sum[1] -= nums[u];//回溯到未放入一等状态
            list1.remove((Integer) nums[u]);
            //放入二等
            sum[2] += nums[u];
            list2.add(nums[u]);
            dfs(u+1);
            sum[2] -= nums[u];
            list2.remove((Integer) nums[u]);
            //放入三等
            sum[3] += nums[u];
            list3.add(nums[u]);
            dfs(u+1);
            sum[3] -= nums[u];
            list3.remove((Integer) nums[u]);

        }
    }


    @Override
    public void output() {
        if (ans == 15*(int)1e5 ) System.out.println(0);
        else System.out.println(ans);
    }

}
class AkP1051 extends Problem {
    int x,y;
    int[] dx = {0,-1,0,1};
    int[] dy = {1,0,-1,0};
    @Override
    public void input() {
        x = scan.nextInt();
        y = scan.nextInt();
        dfs(0,"");
        output();
    }
    /* 伪代码
        迭代
    public void circle() {
        for (int state = 0; state < state_max; state++) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    cat[i][j] = false;
                    dog[i][j] = false;
                }
            }
            int State = state, cat_cnt = 0, dog_cnt = 0;
            for (int j = 0; j < 9; j++) {//9位三进制数
                int a = j / 3, b = j % 3;
                if (State % 3 == 1) {
                    cat[a][b] = true;
                    cat_cnt++;
                }
                if (State % 3 == 2) {
                    dog[a][b] = true;
                    dog_cnt++;
                }
                State /= 3;//相当于三进制的右移一位
            }
            if (cat_cnt != x || dog_cnt != y || !check()) {
                continue;
            }
            res++;
        }
    }

     */
    public void dfs(int u,String t) {
        if (u == 9) {
            int[][] mat = new int[3][3];
            int[] cnt = new int[3];
            for (int i=0;i<3;i++)
                for (int j=0;j<3;j++) {
                    int index = 3*i + j;
                    mat[i][j] = t.charAt(index) - '0';
                    cnt[mat[i][j]]++;
                }

            if (cnt[1]!= x || cnt[2] != y || !judge(mat)) {
                return;
            }

            ans ++;
        }
        //不放、放猫、放狗
        else {
            dfs(u + 1, t + "0");
            dfs(u + 1, t + "1");
            dfs(u + 1, t + "2");

        }
    }
    public boolean judge(int[][] mat) {
        for (int i=0;i<3;i++)
            for (int j=0;j<3;j++) {
                if (mat[i][j] == 1 || mat[i][j] == 2)
                    for (int k=0;k<4;k++) {
                        int cx = i + dx[k];
                        int cy = j + dy[k];
                        if (cx >=0 && cx <= 2 && cy >=0 && cy <= 2 && mat[cx][cy] == mat[i][j]) {

                            return false;
                        }
                    }

            }

        return true;
    }

    @Override
    public void output() {
        System.out.println(ans);
    }
}
class Acw1597 extends Problem {
    int[] root;
    int[] cnt;

    ArrayList<ArrayList<Integer>> list  = new ArrayList<>();
    public int find(int x) {
        if (root[x] == x)
            return x;
        else {
            root[x] = find(root[x]);
            return root[x];
        }
    }
    public void merge(int x,int y ) {
        int rx = find(x),ry = find(y);
        if (rx != ry) {
            cnt[ry] += cnt[rx];
            root[rx] = ry;
        }
    }
    @Override
    public void input() {
        n = scan.nextInt();

        scan.nextLine();

        root = new int[n+1];
        cnt  = new int[n+1];
        for (int i=1;i<=n;i++) {
            root[i] = i;
            cnt[i] = 1;

        }
        for (int i=0;i<1001;i++)
            list.add(new ArrayList<>());

        for (int i=1;i<=n;i++) {
            String[] input = scan.nextLine().split(": ");
            int k = Integer.parseInt(input[0]);
            String[] num = input[1].split(" ");
            for (int j=0;j<k;j++) {
                int hob = Integer.parseInt(num[j]);
                list.get(hob).add(i);
            }
        }

        output();
    }

    @Override
    public void output() {
        for (int i=1;i<=1000;i++) {
            if (list.get(i).size()<2) continue;
            else {
                for (int j=0;j<list.get(i).size()-1;j++) {
                    merge(list.get(i).get(j),list.get(i).get(j+1));
                }
            }
        }
        List<Integer> cnt1 = new ArrayList<>();
        for (int i=1;i<=n;i++) {
            if (root[i] == i) {
                ans++;
                cnt1.add(cnt[i]);
            }
        }
        Collections.sort(cnt1,Collections.reverseOrder());
        System.out.println(ans);
        for (Integer num:cnt1)
            System.out.print(num+" ");
    }
}
class Acw3719 extends Problem {
    int[] root;
    public int find(int x) {
        if (root[x] == x)
            return x;
        else {
            root[x] = find(root[x]);
            return root[x];
        }
    }
    public void merge(int x,int y ) {
        int rx = find(x),ry = find(y);
        if (rx != ry) {
            root[rx] = ry;
        }
    }
    @Override
    public void input() {
        n = scan.nextInt();
        m = scan.nextInt();
        root = new int[n+1];
        for (int i=1;i<=n;i++)
            root[i] = i;
        for (int i=0;i<m;i++) {
            int x = scan.nextInt();
            int y = scan.nextInt();
            merge(x,y);
        }
        output();
    }

    @Override
    public void output() {
        int cnt = 0;
        for (int i=1;i<=n;i++) {
            if (root[i] == i) {
                cnt++;
            }
        }
        System.out.println(cnt-1);
    }
}
class Lc547 {
    int n,ans;
    int[] root;
    public int findCircleNum(int[][] isConnected) {
        n = isConnected.length;
        root = new int[n];
        for (int i=0;i<n;i++) {
            root[i] = i;
        }
        for (int i=0;i<n;i++) {
            for (int j=0;j<n;j++) {
                if (isConnected[i][j]==1) {
                    merge(i,j);
                }
            }
        }
        for (int i=0;i<n;i++) {
            if (root[i]==i) {
                ans++;
            }
        }
        return ans;
    }
    public int find (int x) {
        if (root[x] == x) {
            return x;
        }
        else {
            root[x] = find(root[x]);
            return root[x];
        }
    }
    public void merge(int x,int y ) {
        int rx = find(x),ry = find(y);
        if (rx != ry) {
            root[rx] = ry;
        }
    }
}
class AkP1033 extends Problem {
    public int find(int x) {
        if (root[x] == x) {
            return x;
        }
        else {
            root[x] = find(root[x]);
            return root[x];
        }
    }
    public void merge(int x,int y) {
        int rx = find(x),ry = find(y);
        if (rx != ry) {
            root[rx] = ry;
        }
    }
    int[] root;
    @Override
    public void input() {
        n = scan.nextInt();
        m = scan.nextInt();
        root = new int[n];
        for (int i=0;i<n;i++) {
            root[i] = i;
        }
        for (int i=0;i<m;i++) {
            int x,y;
            x = scan.nextInt();
            y = scan.nextInt();
            merge(x,y);
        }
        output();
    }

    @Override
    public void output() {
        for (int i=0;i<n;i++) {
            if (root[i]==i) {
                ans++;
            }
        }
        System.out.println(ans);
    }
}
class AkP1032 extends Problem {
    int[][] matrix;
    int[] root;
    int[] xsd;
    public int find(int x) {
        if (root[x] == x)
            return x;
        else {
            root[x] = find(root[x]);
            return root[x];
        }
    }
    public void merge(int x,int y) {
        int rx = find(x),ry = find(y);
        xsd[ry] += matrix[x][y];
        if (rx != ry) {
            xsd[ry] += xsd[rx];
            root[rx] = ry;
        }
    }
    @Override
    public void input() {
        n = scan.nextInt();
        root = new int[n];
        xsd = new int[n];
        matrix = new int[n][n];
        for (int i=0;i<n;i++)
            root[i] = i;
        for (int i=0;i<n;i++)
            for (int j=0;j<n;j++) {//错误的写法 j = i+1;
                matrix[i][j] = scan.nextInt();

                if (matrix[i][j] > 0 && i<j ) {
                    merge(i,j);
                }
            }
        output();
    }

    @Override
    public void output() {
        List<Integer> ans = new ArrayList<>();
        for (int i=0;i<n;i++) {
            if (root[i] == i) {
                ans.add(xsd[i]);
            }
        }
        Collections.sort(ans,Comparator.reverseOrder());

        for (int i=0;i<ans.size();i++)
            System.out.print(ans.get(i)+" ");
    }
}
